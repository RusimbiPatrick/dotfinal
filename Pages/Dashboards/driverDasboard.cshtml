@page
@model bus_transport_mgt_sys.Pages.Dashboards.driverDasboardModel

@{
    ViewData["Title"] = "Driver Dashboard";
    Layout = "~/Pages/Shared/_DriverLayout.cshtml";
}

<p>Here are the available schedules:</p>

<!-- Search and Filter Controls -->
<div class="row mb-3">
    <!-- Search Field -->
    <div class="col-md-4">
        <input id="searchInput" type="text" class="form-control" placeholder="Search schedules..." onkeyup="debouncedFilterTable()" />
    </div>

    <!-- Filter by Route -->
    <div class="col-md-3">
        <select id="filterRoute" class="form-select" onchange="filterTable()">
            <option value="">Filter by Route</option>
            @foreach (var route in Model.RoutesDistinct)
            {
                <option value="@route">@route</option>
            }
        </select>
    </div>

    <!-- Filter by Bus Model -->
    <div class="col-md-3">
        <select id="filterBusModel" class="form-select" onchange="filterTable()">
            <option value="">Filter by Bus Model</option>
            @foreach (var busModel in Model.BusModelsDistinct)
            {
                <option value="@busModel">@busModel</option>
            }
        </select>
    </div>

    <!-- Filter by Departure Time -->
    <div class="col-md-2">
        <select id="filterDepartureTime" class="form-select" onchange="filterTable()">
            <option value="">Filter by Departure</option>
            <option value="morning">Morning</option>
            <option value="afternoon">Afternoon</option>
            <option value="evening">Evening</option>
            <option value="night">Night</option>
        </select>
    </div>
</div>

<!-- Available Schedules Table -->
<table id="schedulesTable" class="table table-striped table-hover table-bordered">
    <thead class="table-dark">
        <tr>
            <th onclick="sortTable(0)" style="cursor: pointer;">Route</th>
            <th onclick="sortTable(1)" style="cursor: pointer;">Bus Plate No</th>
            <th onclick="sortTable(2)" style="cursor: pointer;">Bus Model</th>
            <th onclick="sortTable(3)" style="cursor: pointer;">Departure Time</th>
            <th onclick="sortTable(4)" style="cursor: pointer;">Arrival Time</th>
            <th onclick="sortTable(5)" style="cursor: pointer;">Amount ($)</th>
            <th onclick="sortTable(6)" style="cursor: pointer;">Available Seats</th>
            <th>Action</th>
        </tr>
    </thead>
    @if (Model.Schedules != null && Model.Schedules.Any())
    {
        <tbody>
            @foreach (var schedule in Model.Schedules)
            {
                <tr>
                    <td>@schedule.RouteName (@schedule.Departure → @schedule.Destination)</td>
                    <td>@schedule.BusPlateNo</td>
                    <td>@schedule.BusModel</td>
                    <td>@schedule.DepartureTime.ToString("g")</td>
                    <td>@schedule.ArrivalTime.ToString("g")</td>
                    <td>@schedule.Amount</td>
                    <td>@schedule.AvailableSeats</td>
                    @* <td> *@
                    @*     @if (schedule.AvailableSeats > 0) *@
                    @*     { *@
                    @*         <button class="btn btn-primary" *@
                    @*                 onclick="openBookingModal(@schedule.ScheduleId, @schedule.Amount)" *@
                    @*                 aria-label="Book Schedule @schedule.ScheduleId"> *@
                    @*             Book *@
                    @*         </button> *@
                    @*     } *@
                    @*     else *@
                    @*     { *@
                    @*         <span class="text-danger">Unavailable</span> *@
                    @*     } *@
                    @* </td> *@
                </tr>
            }
        </tbody>
    }
    else
    {
        <tbody>
            <tr>
                <td colspan="8" class="text-center">No schedules available</td>
            </tr>
        </tbody>
    }
</table>

@* <!-- Booking Modal --> *@
@* <div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true"> *@
@*     <div class="modal-dialog"> *@
@*         <div class="modal-content"> *@
@*             <form method="post" asp-page-handler="BookSchedule"> *@
@*                 @Html.AntiForgeryToken() *@
@*                 <div class="modal-header"> *@
@*                     <h5 class="modal-title" id="bookingModalLabel">Book Schedule</h5> *@
@*                     <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
@*                 </div> *@
@*                 <div class="modal-body"> *@
@*                     <!-- Hidden Schedule ID --> *@
@*                     <input type="hidden" id="BookingScheduleId" name="ScheduleId" value="" /> *@

@*                     <!-- Amount Field --> *@
@*                     <div class="mb-3"> *@
@*                         <label for="BookingAmount" class="form-label">Amount ($):</label> *@
@*                         <input type="number" id="BookingAmount" name="Amount" class="form-control" readonly /> *@
@*                     </div> *@

@*                     <!-- Number of Seats Field --> *@
@*                     <div class="mb-3"> *@
@*                         <label for="BookingSeats" class="form-label">Number of Seats:</label> *@
@*                         <input type="number" id="BookingSeats" name="Seats" class="form-control" min="1" max="@Model.MaxSeats" required /> *@
@*                     </div> *@

@*                     <!-- Additional Information Field --> *@
@*                     <div class="mb-3"> *@
@*                         <label for="BookingInfo" class="form-label">Additional Information:</label> *@
@*                         <textarea id="BookingInfo" name="AdditionalInfo" class="form-control" rows="3" placeholder="Enter any additional information"></textarea> *@
@*                     </div> *@
@*                 </div> *@
@*                 <div class="modal-footer"> *@
@*                     <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button> *@
@*                     <button type="submit" class="btn btn-primary">Confirm Booking</button> *@
@*                 </div> *@
@*             </form> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<!-- JavaScript for Modal and Table Functionality -->
<script>
    // Debounce function to optimize search performance
    function debounce(func, delay) {
        let debounceTimer;
        return function () {
            const context = this;
            const args = arguments;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => func.apply(context, args), delay);
        }
    }

    // Attach debounce to the search input
    const debouncedFilterTable = debounce(filterTable, 300);

    // Function to filter table rows
    function filterTable() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const filterRoute = document.getElementById('filterRoute').value.toLowerCase();
        const filterBusModel = document.getElementById('filterBusModel').value.toLowerCase();
        const filterDepartureTime = document.getElementById('filterDepartureTime').value.toLowerCase();
        const table = document.getElementById('schedulesTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) { // Start from 1 to skip header
            const route = rows[i].cells[0].textContent.toLowerCase();
            const busModel = rows[i].cells[2].textContent.toLowerCase();
            const departureTimeStr = rows[i].cells[3].textContent;
            const departureTime = new Date(departureTimeStr).getHours();

            // Determine the time of day based on departure time
            let departureCategory = '';
            if (departureTime >= 5 && departureTime < 12) {
                departureCategory = 'morning';
            } else if (departureTime >= 12 && departureTime < 17) {
                departureCategory = 'afternoon';
            } else if (departureTime >= 17 && departureTime < 21) {
                departureCategory = 'evening';
            } else {
                departureCategory = 'night';
            }

            const matchesSearch = route.includes(searchInput) || busModel.includes(searchInput);
            const matchesFilterRoute = !filterRoute || route.includes(filterRoute);
            const matchesFilterBusModel = !filterBusModel || busModel.includes(filterBusModel);
            const matchesFilterDepartureTime = !filterDepartureTime || departureCategory === filterDepartureTime;

            rows[i].style.display = (matchesSearch && matchesFilterRoute && matchesFilterBusModel && matchesFilterDepartureTime) ? '' : 'none';
        }
    }

    // Function to sort table by column
    function sortTable(columnIndex) {
        const table = document.getElementById('schedulesTable');
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);
        const currentSortOrder = table.getAttribute('data-sort-order') === 'asc' ? 'desc' : 'asc';
        const multiplier = currentSortOrder === 'asc' ? 1 : -1;

        rows.sort((a, b) => {
            const aText = a.cells[columnIndex].textContent.trim();
            const bText = b.cells[columnIndex].textContent.trim();

            // Handle numeric sorting for Amount and Available Seats
            if (columnIndex === 5 || columnIndex === 6) { // Amount ($) or Available Seats
                const aNum = parseFloat(aText.replace(/[^0-9.-]+/g,"")); // Remove any non-numeric characters
                const bNum = parseFloat(bText.replace(/[^0-9.-]+/g,""));
                return (aNum - bNum) * multiplier;
            }

            // Handle DateTime sorting for Departure and Arrival Times
            if (columnIndex === 3 || columnIndex === 4) { // Departure Time or Arrival Time
                const aDate = new Date(aText);
                const bDate = new Date(bText);
                return (aDate - bDate) * multiplier;
            }

            // Handle string comparison for other columns
            return aText.localeCompare(bText) * multiplier;
        });

        // Append sorted rows back to the table
        rows.forEach(row => tbody.appendChild(row));

        // Update sort order attribute
        table.setAttribute('data-sort-order', currentSortOrder);
    }

    // Function to open the booking modal and populate fields
    function openBookingModal(scheduleId, amount) {
        document.getElementById("BookingScheduleId").value = scheduleId;
        document.getElementById("BookingAmount").value = amount.toFixed(2);
        document.getElementById("BookingSeats").value = 1;
        document.getElementById("BookingInfo").value = "";

        // Show the modal
        const bookingModal = new bootstrap.Modal(document.getElementById("bookingModal"));
        bookingModal.show();
    }
</script>
