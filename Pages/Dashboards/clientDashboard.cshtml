@page
@model bus_transport_mgt_sys.Pages.Dashboards.clientDashboardModel

@{
    ViewData["Title"] = "Client Dashboard";
    Layout = "~/Pages/Shared/_ClientLayout.cshtml";
}

<div class="row">
    <!-- Active Tickets Section -->
    <div class="col-md-6">
        <h4>Active Tickets</h4>
        <ul>
            <li>Ticket #1234 - Route: City A to City B - Date: 2024-12-15</li>
            <li>Ticket #5678 - Route: City C to City D - Date: 2024-12-20</li>
        </ul>
        <a href="/Tickets/Book" class="btn btn-primary">Book New Ticket</a>
    </div>

    <!-- Payment History Section -->
    <div class="col-md-6">
        <h4>Payment History</h4>
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>2024-12-10</td>
                    <td>$15.00</td>
                    <td>Completed</td>
                </tr>
                <tr>
                    <td>2024-12-08</td>
                    <td>$25.00</td>
                    <td>Completed</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<p>Here are the available schedules:</p>

<!-- Search and Filter Controls -->
<div class="row mb-3">
    <!-- Search Field -->
    <div class="col-md-4">
        <input id="searchInput" type="text" class="form-control" placeholder="Search schedules..." onkeyup="debouncedFilterTable()" />
    </div>

    <!-- Filter by Bus Model -->
    <div class="col-md-3">
        <select id="filterBusModel" class="form-select" onchange="filterTable()">
            <option value="">Filter by Bus Model</option>
            @if (Model.BusModelsDistinct != null)
            {
                @foreach (var busModel in Model.BusModelsDistinct)
                {
                    <option value="@busModel">@busModel</option>
                }
            }
        </select>
    </div>

    <!-- Filter by Bus Model -->
    <div class="col-md-3">
        <select id="filterBusModel" class="form-select" onchange="filterTable()">
            <option value="">Filter by Bus Model</option>
            @foreach (var busModel in Model.BusModelsDistinct)
            {
                <option value="@busModel">@busModel</option>
            }
        </select>
    </div>

    <!-- Filter by Departure Time -->
    <div class="col-md-2">
        <select id="filterDepartureTime" class="form-select" onchange="filterTable()">
            <option value="">Filter by Departure</option>
            <option value="Morning">Morning</option>
            <option value="Afternoon">Afternoon</option>
            <option value="Evening">Evening</option>
            <option value="Night">Night</option>
        </select>
    </div>
</div>

<!-- Available Schedules Table -->
<table id="schedulesTable" class="table table-striped table-hover table-bordered">
    <thead class="table-dark">
        <tr>
            <th onclick="sortTable(0)" style="cursor: pointer;">Route</th>
            <th onclick="sortTable(1)" style="cursor: pointer;">Bus Plate No</th>
            <th onclick="sortTable(2)" style="cursor: pointer;">Bus Model</th>
            <th onclick="sortTable(3)" style="cursor: pointer;">Departure Time</th>
            <th onclick="sortTable(4)" style="cursor: pointer;">Arrival Time</th>
            <th onclick="sortTable(5)" style="cursor: pointer;">Amount ($)</th>
            <th onclick="sortTable(6)" style="cursor: pointer;">Available Seats</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var schedule in Model.Schedules)
        {
            <tr>
                <td>@schedule.RouteName (@schedule.Departure → @schedule.Destination)</td>
                <td>@schedule.BusPlateNo</td>
                <td>@schedule.BusModel</td>
                <td>@schedule.DepartureTime.ToString("g")</td>
                <td>@schedule.ArrivalTime.ToString("g")</td>
                <td>@schedule.Amount</td>
                <td>@schedule.AvailableSeats</td>
                <td>
                    @if (schedule.AvailableSeats > 0)
                    {
                        <button class="btn btn-primary"
                                onclick="openPaymentModal(@schedule.ScheduleId, @schedule.Amount)">
                            Book Ticket
                        </button>
                    }
                    else
                    {
                        <span class="text-danger">Unavailable</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Payment Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Book Ticket</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Razor Form for Booking Ticket -->
                <form method="post" asp-page-handler="BookTicket">
                    <!-- Hidden Schedule ID -->
                    <input type="hidden" id="ScheduleId" name="ScheduleId" value="" />

                    <!-- Amount Field -->
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount:</label>
                        <input type="number" id="amount" name="Amount" class="form-control" readonly />
                    </div>

                    <!-- Payment Method Field -->
                    <div class="mb-3">
                        <label for="paymentMethod" class="form-label">Payment Method:</label>
                        <select id="paymentMethod" name="PaymentMethod" class="form-select" required>
                            <option value="" disabled selected>-- Select Payment Method --</option>
                            <option value="Mobile Money">Mobile Money</option>
                            <option value="Credit Card">Credit Card</option>
                        </select>
                    </div>

                    <!-- Phone Number Field -->
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number:</label>
                        <input type="text" id="phoneNumber" name="PhoneNumber" class="form-control" placeholder="Enter phone number" required />
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="btn btn-primary">Book Ticket</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Modal and Table Functionality -->
<script>
    // Debounce function to optimize search performance
    function debounce(func, delay) {
        let debounceTimer;
        return function () {
            const context = this;
            const args = arguments;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => func.apply(context, args), delay);
        }
    }

    // Attach debounce to the search input
    const debouncedFilterTable = debounce(filterTable, 300);

    // Function to filter table rows
    function filterTable() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const filterRoute = document.getElementById('filterRoute').value.toLowerCase();
        const filterBusModel = document.getElementById('filterBusModel').value.toLowerCase();
        const filterDepartureTime = document.getElementById('filterDepartureTime').value.toLowerCase();
        const table = document.getElementById('schedulesTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) { // Start from 1 to skip header
            const route = rows[i].cells[0].textContent.toLowerCase();
            const busModel = rows[i].cells[2].textContent.toLowerCase();
            const departureTime = new Date(rows[i].cells[3].textContent).getHours();

            // Determine the time of day based on departure time
            let departureCategory = '';
            if (departureTime >= 5 && departureTime < 12) {
                departureCategory = 'morning';
            } else if (departureTime >= 12 && departureTime < 17) {
                departureCategory = 'afternoon';
            } else if (departureTime >= 17 && departureTime < 21) {
                departureCategory = 'evening';
            } else {
                departureCategory = 'night';
            }

            const matchesSearch = route.includes(searchInput) || busModel.includes(searchInput);
            const matchesFilterRoute = !filterRoute || route.includes(filterRoute);
            const matchesFilterBusModel = !filterBusModel || busModel.includes(filterBusModel);
            const matchesFilterDepartureTime = !filterDepartureTime || departureCategory === filterDepartureTime;

            rows[i].style.display = (matchesSearch && matchesFilterRoute && matchesFilterBusModel && matchesFilterDepartureTime) ? '' : 'none';
        }
    }

    // Function to sort table by column
    function sortTable(columnIndex) {
        const table = document.getElementById('schedulesTable');
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);
        const currentSortOrder = table.getAttribute('data-sort-order') === 'asc' ? 'desc' : 'asc';
        const multiplier = currentSortOrder === 'asc' ? 1 : -1;

        rows.sort((a, b) => {
            const aText = a.cells[columnIndex].textContent.trim();
            const bText = b.cells[columnIndex].textContent.trim();

            // Handle numeric sorting for Amount and Available Seats
            if (columnIndex === 5 || columnIndex === 6) { // Amount ($) or Available Seats
                const aNum = parseFloat(aText);
                const bNum = parseFloat(bText);
                return (aNum - bNum) * multiplier;
            }

            // Handle DateTime sorting for Departure and Arrival Times
            if (columnIndex === 3 || columnIndex === 4) { // Departure Time or Arrival Time
                const aDate = new Date(aText);
                const bDate = new Date(bText);
                return (aDate - bDate) * multiplier;
            }

            // Handle string comparison for other columns
            return aText.localeCompare(bText) * multiplier;
        });

        // Append sorted rows back to the table
        rows.forEach(row => tbody.appendChild(row));

        // Update sort order attribute
        table.setAttribute('data-sort-order', currentSortOrder);
    }

    // Function to open the payment modal and populate fields
    function openPaymentModal(scheduleId, amount) {
        document.getElementById("ScheduleId").value = scheduleId;
        document.getElementById("amount").value = amount;
        document.getElementById("phoneNumber").value = "";
        document.getElementById("paymentMethod").value = "";

        // Show the modal
        const paymentModal = new bootstrap.Modal(document.getElementById("paymentModal"));
        paymentModal.show();
    }
</script>
