@page
@model bus_transport_mgt_sys.Pages.Dashboards.Payments.IndexModel

@{
    ViewData["Title"] = "Payment Management";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <a asp-page="/Dashboards/adminDashboard" class="btn btn-secondary">Back</a>
        <h1 class="text-primary">Payment Management</h1>
        <div class="d-flex gap-2">
            <a asp-page="Create" class="btn btn-success">Create New</a>
            <button onclick="exportTableToCSV()" class="btn btn-primary">Export to CSV</button>
        </div>
    </div>

    <!-- Search and Filter Controls -->
    <div class="row mb-3">
        <!-- Search Field -->
        <div class="col-md-4">
            <input id="searchInput" type="text" class="form-control" placeholder="Search payments..." onkeyup="debouncedFilterTable()" />
        </div>

        <!-- Filter by Payment Method -->
        <div class="col-md-3">
            <select id="filterPaymentMethod" class="form-select" onchange="filterTable()">
                <option value="">Filter by Payment Method</option>
                @foreach (var method in Model.PaymentMethodsDistinct)
                {
                    <option value="@method">@method</option>
                }
            </select>
        </div>

        <!-- Filter by Bus ID -->
        <div class="col-md-3">
            <select id="filterBusId" class="form-select" onchange="filterTable()">
                <option value="">Filter by Bus ID</option>
                @foreach (var busId in Model.BusIdsDistinct)
                {
                    <option value="@busId">@busId</option>
                }
            </select>
        </div>

        <!-- Sort by Amount -->
        <div class="col-md-2">
            <select id="sortOrder" class="form-select" onchange="sortTableByAmount()">
                <option value="">Sort by Amount</option>
                <option value="asc">Amount Ascending</option>
                <option value="desc">Amount Descending</option>
            </select>
        </div>
    </div>

    <!-- Payments Table -->
    <table id="paymentTable" class="table table-striped table-hover table-bordered">
        <thead class="table-dark">
            <tr>
                <th onclick="sortTable(0)" style="cursor: pointer;">Amount</th>
                <th onclick="sortTable(1)" style="cursor: pointer;">Payment Date</th>
                <th onclick="sortTable(2)" style="cursor: pointer;">Payment Method</th>
                <th onclick="sortTable(3)" style="cursor: pointer;">Bus ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Payment)
            {
                <tr>
                    <td>@($"{item.Amount:C}")</td>
                    <td>@item.PaymentDate.ToString("yyyy-MM-dd")</td>
                    <td>@item.PaymentMethod</td>
                    <td>@item.Ticket.BusId</td>
                    <td>
                        <div class="d-flex gap-2">
                            <a asp-page="./Details" asp-route-id="@item.PaymentId" class="btn btn-info btn-sm">Details</a>
                            <a asp-page="./Delete" asp-route-id="@item.PaymentId" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this payment?');">Delete</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- JavaScript for Frontend Search, Sort, Filter, and Export -->
<script>
    // Debounce function to optimize search performance
    function debounce(func, delay) {
        let debounceTimer;
        return function() {
            const context = this;
            const args = arguments;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => func.apply(context, args), delay);
        }
    }

    // Attach debounce to the search input
    const debouncedFilterTable = debounce(filterTable, 300);

    // Function to filter table rows
    function filterTable() {
        const searchInput = document.getElementById('searchInput').value.toLowerCase();
        const filterPaymentMethod = document.getElementById('filterPaymentMethod').value.toLowerCase();
        const filterBusId = document.getElementById('filterBusId').value.toLowerCase();
        const table = document.getElementById('paymentTable');
        const rows = table.getElementsByTagName('tr');

        for (let i = 1; i < rows.length; i++) { // Start from 1 to skip header
            const amount = rows[i].cells[0].textContent.toLowerCase();
            const paymentDate = rows[i].cells[1].textContent.toLowerCase();
            const paymentMethod = rows[i].cells[2].textContent.toLowerCase();
            const busId = rows[i].cells[3].textContent.toLowerCase();

            const matchesSearch = amount.includes(searchInput) || paymentDate.includes(searchInput) || paymentMethod.includes(searchInput) || busId.includes(searchInput);
            const matchesFilterPaymentMethod = !filterPaymentMethod || paymentMethod === filterPaymentMethod;
            const matchesFilterBusId = !filterBusId || busId === filterBusId;

            rows[i].style.display = (matchesSearch && matchesFilterPaymentMethod && matchesFilterBusId) ? '' : 'none';
        }
    }

    // Function to sort table by column
    function sortTable(columnIndex) {
        const table = document.getElementById('paymentTable');
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);
        const currentSortOrder = table.getAttribute('data-sort-order') === 'asc' ? 'desc' : 'asc';
        const multiplier = currentSortOrder === 'asc' ? 1 : -1;

        rows.sort((a, b) => {
            const aText = a.cells[columnIndex].textContent.trim();
            const bText = b.cells[columnIndex].textContent.trim();

            // Handle numeric sorting for Amount
            if (columnIndex === 0) { // Amount column
                const aAmount = parseFloat(aText.replace(/[^0-9.-]+/g,""));
                const bAmount = parseFloat(bText.replace(/[^0-9.-]+/g,""));
                return (aAmount - bAmount) * multiplier;
            }

            // Handle date sorting for Payment Date
            if (columnIndex === 1) { // Payment Date column
                const aDate = new Date(aText);
                const bDate = new Date(bText);
                return (aDate - bDate) * multiplier;
            }

            // Handle string comparison for other columns
            return aText.localeCompare(bText) * multiplier;
        });

        // Append sorted rows back to the table
        rows.forEach(row => tbody.appendChild(row));

        // Update sort order attribute
        table.setAttribute('data-sort-order', currentSortOrder);
    }

    // Function to sort table by Amount using the sortOrder select
    function sortTableByAmount() {
        const sortOrder = document.getElementById('sortOrder').value;
        const table = document.getElementById('paymentTable');
        const tbody = table.tBodies[0];
        const rows = Array.from(tbody.rows);
        let multiplier = 1;

        if (sortOrder === 'asc') {
            multiplier = 1;
            table.setAttribute('data-sort-order', 'asc');
        } else if (sortOrder === 'desc') {
            multiplier = -1;
            table.setAttribute('data-sort-order', 'desc');
        } else {
            return; // No sorting if no option selected
        }

        rows.sort((a, b) => {
            const aAmount = parseFloat(a.cells[0].textContent.trim().replace(/[^0-9.-]+/g,""));
            const bAmount = parseFloat(b.cells[0].textContent.trim().replace(/[^0-9.-]+/g,""));
            return (aAmount - bAmount) * multiplier;
        });

        // Append sorted rows back to the table
        rows.forEach(row => tbody.appendChild(row));
    }

    // Function to export table to CSV
    function exportTableToCSV() {
        const table = document.getElementById('paymentTable');
        const rows = table.querySelectorAll('tr');

        // Prepare CSV content
        const csvContent = [];

        // Extract headers
        const headers = Array.from(rows[0].querySelectorAll('th'))
            .map(header => header.textContent.trim())
            .slice(0, -1); // Exclude the 'Actions' column
        csvContent.push(headers.join(','));

        // Extract data rows
        for (let i = 1; i < rows.length; i++) {
            const rowData = Array.from(rows[i].querySelectorAll('td'))
                .slice(0, -1) // Exclude the 'Actions' column
                .map(cell => {
                    // Escape double quotes and wrap in quotes to handle commas in data
                    let cellText = cell.textContent.trim().replace(/"/g, '""');
                    return `"${cellText}"`;
                });

            csvContent.push(rowData.join(','));
        }

        // Create CSV file
        const csvString = csvContent.join('\n');
        const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

        // Create download link
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'payments_export.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
